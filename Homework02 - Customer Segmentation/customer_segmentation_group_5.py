# -*- coding: utf-8 -*-
"""Customer_Segmentation_Group_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_D7_LVaP-YRS8HoZ8iCR9u6Q75-yGnnT

**Group Members**

1. Kornkamol Rodpunya 6310412002

2. Wanida Sitthipaeng 6310412011

3. Amara Kaweekate 6310412014

# **Load Dependencies**
"""

!pip install pycaret

import pandas as pd
from pycaret.clustering import *

"""# **Load Data**"""

df = pd.read_csv('Supermarket Data.csv')

df['SHOP_DATE'] = df['SHOP_DATE'].apply(lambda x: pd.to_datetime(str(x), format='%Y%m%d'))

df.tail(5)

df.info

"""# **Prepare customer single view**

# Define features

Total visits = COUNT(DISTINCT BASKET ID)

Ticket size = SUM(SPEND)/COUNT(DISTINCT BASKET ID)

Total no. of SKUs

TotalQuantity = SUM(QUANTITY)

avg_Quantity_per_TotalVisit = SUM(QUANTITY)/COUNT(DISTINCT BASKET ID)

# Calculate features
"""

##prepare customer single view
df_csv = df_groupby = df[df['CUST_CODE'].notnull()].groupby(by=['CUST_CODE']).agg(TotalSpend=('SPEND', 'sum'),
                                                                                  TotalVisits=('BASKET_ID', 'nunique'),
                                                                                  TotalSKUs=('PROD_CODE', 'nunique'),                                                                                  
                                                                                  FirstDate=('SHOP_DATE', 'min'),                                                                        
                                                                                  LastDate=('SHOP_DATE', 'max'),
                                                                                  TotalQuantity=('QUANTITY', 'sum'),
                                                                                  ).reset_index()

##calculate ticket size
df_csv['TicketSize'] = df_csv['TotalSpend']/df_csv['TotalVisits']

##find max date in the dataset
max_date = df_csv['LastDate'].max()

##calculate total days of the relationship
df_csv['total_days'] = (df_csv['LastDate'] - df_csv['FirstDate']).dt.days + 1

##calculate recency days
df_csv['recency'] = (max_date - df_csv['LastDate']).dt.days

df_csv['avg_Quantity_per_TotalVisit'] = (df_csv['TotalQuantity']/df_csv['TotalVisits'])

df_csv.head(10)

"""# **Cluster customers**"""

exp_clu = setup(data=df_csv, ignore_features=['CUST_CODE','FirstDate', 'LastDate'], normalize=True)

models()

get_metrics()

"""# Compare model performance"""

metrics = []
for model in models().index:
    if model in ['meanshift', 'optics']:
        continue
    create_model(model)
    metric_result = pull()
    metric_result['model'] = model
    metrics.append(metric_result)

cluster_metrics = pd.concat(metrics)
cluster_metrics.set_index("model", inplace=True)
cluster_metrics.sort_values(by='Silhouette', ascending=False, inplace=True)
cluster_metrics.style.highlight_max(subset=['Silhouette', 'Calinski-Harabasz'], color = 'green', axis = 0).highlight_min(subset=['Davies-Bouldin'], color = 'green', axis = 0)

"""# Spectral Clustering Clustering"""

sc = create_model('sc')

plot_model(sc)

"""# KMeans Clustering"""

kmeans = create_model('kmeans')

print(kmeans)

plot_model(kmeans)

plot_model(kmeans, plot = 'elbow')

plot_model(kmeans, plot = 'silhouette')

## https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html

"""# **Interpret results and plan for actions**

1.   List item
2.   List item


"""

kmeans_results = assign_model(kmeans)
kmeans_results.head(5)

kmeans_results.to_csv(r'kmeans_results', index = False, header=True)

plot_model(kmeans, plot = 'distribution')

plot_model(kmeans, plot = 'distribution', feature = 'TotalSpend')

plot_model(kmeans, plot = 'distribution', feature = 'TotalVisits')

plot_model(kmeans, plot = 'distribution', feature = 'TotalSKUs')

plot_model(kmeans, plot = 'distribution', feature = 'TotalQuantity')

plot_model(kmeans, plot = 'distribution', feature = 'TicketSize')

plot_model(kmeans, plot = 'distribution', feature = 'avg_Quantity_per_TotalVisit')

plot_model(kmeans, plot = 'distribution', feature = 'recency')